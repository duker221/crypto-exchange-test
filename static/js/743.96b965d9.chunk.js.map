{"version":3,"file":"static/js/743.96b965d9.chunk.js","mappings":"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","sources":["../node_modules/@safe-global/safe-apps-provider/src/index.ts","../node_modules/@safe-global/safe-apps-provider/src/provider.ts","../node_modules/@safe-global/safe-apps-provider/src/utils.ts"],"sourcesContent":["export { SafeAppProvider } from './provider';\n","import SafeAppsSDK, { SafeInfo, Web3TransactionObject } from '@safe-global/safe-apps-sdk';\nimport { EventEmitter } from 'events';\nimport { EIP1193Provider } from './types';\nimport { getLowerCase } from './utils';\n\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nexport class SafeAppProvider extends EventEmitter implements EIP1193Provider {\n  private readonly safe: SafeInfo;\n  private readonly sdk: SafeAppsSDK;\n  private submittedTxs = new Map<string, Web3TransactionObject>();\n\n  constructor(safe: SafeInfo, sdk: SafeAppsSDK) {\n    super();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  async connect(): Promise<void> {\n    this.emit('connect', { chainId: this.chainId });\n    return;\n  }\n\n  async disconnect(): Promise<void> {\n    return;\n  }\n\n  public get chainId(): number {\n    return this.safe.chainId;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request: { method: string; params?: any[] }): Promise<any> {\n    const { method, params = [] } = request;\n\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'personal_sign': {\n        const [message, address] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        const response = await this.sdk.txs.signMessage(message);\n        const signature = 'signature' in response ? response.signature : undefined;\n\n        return signature || '0x';\n      }\n\n      case 'eth_sign': {\n        const [address, messageHash] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        const response = await this.sdk.txs.signMessage(messageHash);\n        const signature = 'signature' in response ? response.signature : undefined;\n\n        return signature || '0x';\n      }\n\n      case 'eth_signTypedData':\n      case 'eth_signTypedData_v4': {\n        const [address, typedData] = params;\n        const parsedTypedData = typeof typedData === 'string' ? JSON.parse(typedData) : typedData;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address is invalid');\n        }\n\n        const response = await this.sdk.txs.signTypedMessage(parsedTypedData);\n        const signature = 'signature' in response ? response.signature : undefined;\n        return signature || '0x';\n      }\n\n      case 'eth_sendTransaction':\n        // `value` or `data` can be explicitly set as `undefined` for example in Viem. The spread will overwrite the fallback value.\n        const tx = {\n          ...params[0],\n          value: params[0].value || '0',\n          data: params[0].data || '0x',\n        };\n\n        // Some ethereum libraries might pass the gas as a hex-encoded string\n        // We need to convert it to a number because the SDK expects a number and our backend only supports\n        // Decimal numbers\n        if (typeof tx.gas === 'string' && tx.gas.startsWith('0x')) {\n          tx.gas = parseInt(tx.gas, 16);\n        }\n\n        const resp = await this.sdk.txs.send({\n          txs: [tx],\n          params: { safeTxGas: tx.gas },\n        });\n\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null,\n        });\n        return resp.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([getLowerCase(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n\n      case 'eth_getTransactionReceipt': {\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.transactionHash = params[0];\n          }\n          return tx;\n        });\n      }\n\n      case 'eth_estimateGas': {\n        return this.sdk.eth.getEstimateGas(params[0]);\n      }\n\n      case 'eth_call': {\n        return this.sdk.eth.call([params[0], params[1]]);\n      }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n\n      case 'wallet_getPermissions':\n        return this.sdk.wallet.getPermissions();\n\n      case 'wallet_requestPermissions':\n        return this.sdk.wallet.requestPermissions(params[0]);\n\n      case 'safe_setSettings':\n        return this.sdk.eth.setSafeSettings([params[0]]);\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request: any, callback: (error: any, response?: any) => void): void {\n    if (!request) callback('Undefined request');\n    this.request(request)\n      .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch((error) => callback(error, null));\n  }\n}\n","export function getLowerCase(value: string): string {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\n"],"names":["provider_1","require","Object","enumerable","get","SafeAppProvider","events_1","utils_1","EventEmitter","constructor","safe","sdk","super","submittedTxs","Map","this","connect","emit","chainId","disconnect","request","method","params","safeAddress","toString","message","address","toLowerCase","Error","response","txs","signMessage","signature","undefined","messageHash","startsWith","typedData","parsedTypedData","JSON","parse","signTypedMessage","tx","value","data","gas","parseInt","resp","send","safeTxGas","set","safeTxHash","from","hash","gasPrice","nonce","input","to","blockHash","blockNumber","transactionIndex","eth","getBlockByNumber","number","getBalance","getLowerCase","getCode","getTransactionCount","getStorageAt","getBlockByHash","txHash","getBySafeTxHash","e","has","getTransactionByHash","then","getTransactionReceipt","transactionHash","getEstimateGas","call","getPastLogs","getGasPrice","wallet","getPermissions","requestPermissions","setSafeSettings","callback","result","jsonrpc","id","catch","error","exports"],"sourceRoot":""}